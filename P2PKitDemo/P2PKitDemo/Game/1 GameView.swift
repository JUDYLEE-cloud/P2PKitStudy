//
//  GameView.swift
//  P2PKitDemo
//
//  Created by Ïù¥Ï£ºÌòÑ on 7/8/25.
//

import SwiftUI
import P2PKit

struct GameView: View {
    // Í∞Å ÌåêÏùò ÏÉÅÌÉú (Ï¢åÌëú, ÌîåÎ†àÏù¥Ïñ¥ Ïù¥Î¶Ñ) (Ïòà: moves.value["0,1"] = "üê∏ Judy‚Äôs iPhone")
    @StateObject private var moves = P2PSyncedObservable(name: "TicTacToeMoves", initial: [String: String]())
    // ÌòÑÏû¨ ÌÑ¥Ïù∏ ÌîåÎ†àÏù¥Ïñ¥Ïùò Ïù¥Î¶Ñ
    // @StateObject private var currentTurn = P2PNetwork.currentTurnPlayerName

    // Î™®Îì† ÌîåÎ†àÏù¥Ïñ¥ Î∞∞Ïó¥
    private var allPlayers: [Peer] {
        [P2PNetwork.myPeer] + P2PNetwork.connectedPeers // ÎÇò ÏûêÏã† + Ïó∞Í≤∞Îêú ÏÇ¨Îûå
    }
    private var myDisplayName: String {
        P2PNetwork.myPeer.displayName // ÎÇò ÏûêÏã† -> 'ÎÇò:'Î•º Î∂ôÏù¥Í∏∞ ÏúÑÌï®
    }

    var body: some View {
        VStack {
//            VStack(alignment: .leading, spacing: 8) {
//                ForEach(allPlayers.map { $0.displayName }, id: \.self) { name in
//                    
//                    let isMe = name == myDisplayName
//                    let displayText = isMe ? "ÎÇò: \(name)" : name
//
//                    Text(displayText)
//                        .padding(6)
//                        .background(currentTurn.value == name ? Color.yellow.opacity(0.3) : Color.clear)
//                        .cornerRadius(8)
//                        .overlay(
//                            RoundedRectangle(cornerRadius: 8)
//                                .stroke(currentTurn.value == name ? Color.orange : Color.clear, lineWidth: 2)
//                        )
//                }
//            }
//            .padding(.bottom)
//
//            ForEach(0..<3, id: \.self) { row in
//                HStack {
//                    ForEach(0..<3, id: \.self) { column in
//                        let key = "\(row),\(column)"
//                        Button(action: {
//                            // 1. ÎÇ¥ Ï∞®Î°ÄÏù∏ÏßÄ, 2. Ïπ∏Ïù¥ ÎπÑÏñ¥ÏûàÎäîÏßÄ ÌôïÏù∏
//                            if currentTurn.value == myDisplayName && moves.value[key] == nil {
//                                // 3. Ïπ∏Ïóê ÎÇ¥ Ïù¥Î¶ÑÏùÑ Í∏∞Î°ù
//                                moves.value[key] = myDisplayName
//
//                                // 4. Îã§Ïùå Ï∞®Î°Ä ÌîåÎ†àÏù¥Ïñ¥ ÏßÄÏ†ï, Îã§Ïùå Ï∞®Î°ÄÎ°ú ÌÑ¥ ÎÑòÍπÄ
//                                // ÌÑ¥ ÏàúÏÑúÎäî ÌîåÎ†àÏù¥Ïñ¥ Ïù¥Î¶ÑÏùÑ ÏÇ¨Ï†ÑÏàúÏúºÎ°ú Ï†ïÎ†¨Ìï¥ÏÑú ÏûêÎèôÏúºÎ°ú Í≤∞Ï†ï
//                                let playerNames = allPlayers.map { $0.displayName }.sorted()
//                                if let currentIdx = playerNames.firstIndex(of: myDisplayName) {
//                                    let nextIdx = (currentIdx + 1) % playerNames.count
//                                    currentTurn.value = playerNames[nextIdx]
//                                }
//                            }
//                        }) {
//                            Text(symbolForPlayer(name: moves.value[key]))
//                                .frame(width: 60, height: 60)
//                                .background(Color.gray.opacity(0.2))
//                                .border(Color.black)
//                                .font(.largeTitle)
//                        }
//                        .disabled(currentTurn.value != myDisplayName || moves.value[key] != nil)
//                    }
//                }
//            }

            Text("Ïó∞Í≤∞Îêú ÏÇ¨Îûå Ïàò: \(P2PNetwork.connectedPeers.count + 1)")

            // Ïó∞Í≤∞Îêú ÏÇ¨Îûå Ïù¥Î¶Ñ ÌëúÏãú
            VStack(alignment: .leading, spacing: 4) {
                ForEach([P2PNetwork.myPeer] + P2PNetwork.connectedPeers, id: \.id) { peer in
                    Text(peer.displayName)
                        .font(.subheadline)
                        .foregroundColor(peer.id == P2PNetwork.myPeer.id ? .blue : .primary)
                }
            }
            
        }
        .padding()
    }

    private func symbolForPlayer(name: String?) -> String {
        guard let name = name else { return "" }
        let sortedPlayers = allPlayers.map { $0.displayName }.sorted()
        if let index = sortedPlayers.firstIndex(of: name) {
            return ["X", "O", "‚ñ≥", "‚ñ°", "‚òÜ"][index % 5] // ÏµúÎåÄ 5Î™Ö ÏßÄÏõê
        }
        return "?"
    }
}

#Preview {
    GameView()
}

